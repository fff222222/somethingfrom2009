<!--
To change this template, choose Tools | Templates
and open the template in the editor.
-->
<!DOCTYPE HTML>
<html>
    <head>
        <title></title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <script src="../jquery.js"></script>
        <style>
            #main-canvas{
                position:absolute;
                top:50px;
                left:0;
                z-index:10;
                border:1px solid #aaa;
            }
            #sub-canvas{
                position:absolute;
                top:50px;
                left:0;
                z-index:100;
                border:1px solid #aaa;
            }

            #redraw-canvas{
                position:absolute;
                top:50px;
                left:0;
                z-index:1;
                visibility: hidden;
            }
        </style>
    </head>
    <body>
        <button id="_1000">随机生成1000个电阻</button>
        <button id="result">查看渲染结果</button>
        <button id="sub">查看辅助层(调试)</button>
        <button id="resize-big">变大</button>
    <canvas id="main-canvas" width="1000" height="600"></canvas>
    <canvas id="sub-canvas" width="1000" height="600" ></canvas>
    <canvas id="redraw-canvas" width="1000" height="600" ></canvas>

    <script>
       /**
        *1.多canvas参与作图实现激活和局部重绘
        *一共有三个canvas参与画图,其中一个main-canvas是存放渲染结果的,所有静态的渲染结果都存在这个画布中
        *第二个sub-canvas是在一个图元被拾取起来之后,之后这个图元的渲染就在这个sub-canvas中进行,也就是说这个canvas里面同时只会有一个图元或者一个图元组(多个被选中的图元,现在还没实现)
        *第三个redraw-canvas是用来对主画布(main-canvas)进行局部重绘的,主画布创建后就不会被全部重绘,而是每个图元发生更改后,只对这个图元所在的栅格进行重绘,重绘原理:
        *找出当前图元所在的栅格,然后找出这些栅格里所有的图元,将图元放到数组里,然后用translate把redraw-canvas的原点设置成栅格左上角的坐标,大小设置成栅格跨越的宽高,然后把所有图元在
        *redraw-canvas上重绘,绘制完后,把redraw-canvas的图像copy到主画布响应的位置(当然,之前这个位置已经被局部清空);这样就完成了局部重绘.
        *
        *2.栅格系统
        *将整个画布划分成一个一个小区块.
        *每个区块里有当前区块里涉及到的图元的索引,每个图元有自己所涉及到的区块的索引.
        *栅格系统大大减少了关键操作的性能损耗.例如:
        *拾取图元的时候,根据点击坐标,计算所点击的图元,然后只对这个单元里面的图元进行检测,大大减少计算量.
        *当一个图元更改完成被确定的时候,需要重绘主画布,这时候,计算图元所在的栅格,然后只终会这些栅格所在的区域,绘制过程见上面redraw-canvas的原理.因为需要重绘的区域非常小,所以性能很好.
        *
        *3.系统设计尝试
        *系统用GO(GraphicObject)对象表示基本图元对象,其他所有的图元,以及图元组都继承自此对象,图元有两种,一种基本图元,例如文字,图形,他们不能包含其他图元,是最底层的图元,
        *还有一种图元可以包含其他图元,例如一个电阻,里面包含两个文字图元和一个图形图元.
        *图元只是一个数据对象,和视图表现没有直接联系.图元有自己的一些方法,提供给控制器来使用,例如绘图方法,检测点是否在图元内的方法.
        *GOControl对象是控制器,用来控制所有的事件,绘图,渲染,栅格,图元深度等
        */
        var GLOBAL=function(){
            var main_canvas=$("#main-canvas")[0]
            var sub_canvas=$("#sub-canvas")[0]
            var redraw_canvas=$("#redraw-canvas")[0]
            return {
                main_canvas:main_canvas,
                sub_canvas:sub_canvas,
                main_ctx:main_canvas.getContext("2d"),
                sub_ctx:sub_canvas.getContext("2d"),
                now_canvas:sub_canvas,
                now_ctx:sub_canvas.getContext("2d"),
                grid_width:30,
                grid_height:30,
                grid_xCount:400,
                grid_yCount:200,
                redraw_canvas:redraw_canvas,
                redraw_ctx:redraw_canvas.getContext("2d")
            }
        }();
       
        var extend=function(source){
            var r=function(){

            }
            for(var i in source.prototype){
                r.prototype[i]=source.prototype[i]
            }
            return r;
        };
        var ap=function(target,prototypes){
            for(var i in prototypes){
                target.prototype[i]=prototypes[i];
            }
            return target;
        };

        var line=function(p,w){
            p=parseInt(p)

            return p+((w%2==0)?0:0.5)
        }
        /**
         * GraphicObject 基础图元对象
         * 一个图元对象是一个基本的元素,它可以被拖动,可以添加和删除(基本图元不可以删除,只有图元组才可以删除)
         * 拥有这些基本属性:
         * xy坐标,相对于画布.
         * 宽度和高度,文字的宽度可以由 measureText方法计算
         */
        var GO=function(){
        }
        GO.prototype={
            init:function(){
                this.x=0;
                this.y=0;
                this.width=0;
                this.height=0;
                this.ctx=GLOBAL.sub_ctx;
                this.grids=[]//所在框架跨越那些栅格
                this.id;
                this.zIndex;
                this._init();
            },
            _init:function(){
                
            },
            draw:function(){
                
            },
            checkPoint:function(x,y){
                if((x>=this.x&&x<=(this.x+this.width))||(y>=this.y&&y<=(this.y+this.height))){
                    return true;
                }else{
                    return false;
                }
            }
        }
        /**
         * 用来控制所有的图元,例如激活某个图元,绘制某个图元,
         * 图元GO只是一种数据结构,而GOControl则提供数据到视图的转换方法和接口
         */
        var GOControl=function(){
            var main_ctx=GLOBAL.main_ctx;
            var sub_ctx=GLOBAL.sub_ctx;
            var main_canvas=GLOBAL.main_canvas;
            var sub_canvas=GLOBAL.sub_canvas;
            var will_GO=null;//现在的图元,之后画出来的都是这个图元或者图元组
            var active_GO=null;//当前激活的图元,可以对此图元进行一些激活后的操作,例如:拖动更改等
            var now;
            var isDragging=false;
            var zIndex=0;
            var copyImg=null;
            return {
                GOS:[],//所有图元的集合
                GRIDS:{
                    
                },
                zIndexs:{
                        
                },
                will_GO:null,
                active:function(go){
                    active_GO=go;
                  
                    GLOBAL.sub_ctx.beginPath();
                    GLOBAL.sub_ctx.lineWidth=1;
                    GLOBAL.sub_ctx.strokeStyle="#ddd"
                    GLOBAL.sub_ctx.strokeRect(go.x-5,go.y-5,go.width+8,go.height+8)
                    GLOBAL.sub_ctx.stroke()
                },
                unactive:function(go){
                    this.reDrawSub(go);
                },
                toMain:function(go){
                    this.unactive(go)
                        
                },
                reDrawSub:function(go){
                    GLOBAL.sub_ctx.clearRect(0,0,GLOBAL.sub_canvas.width,GLOBAL.sub_canvas.height)
                },
                reDrawMain:function(go,drawThis){
                    var __w=GLOBAL.grid_width;
                    var __h=GLOBAL.grid_height;
                    var redraw_ctx=GLOBAL.redraw_ctx;
                    var redraw_canvas=GLOBAL.redraw_canvas;
                    var canvas=GLOBAL.now_canvas;
                    var ctx=GLOBAL.now_ctx;
                    var grids=go.grids;
                    //     console.log(grids)
                    var gos=[]
                    
                    grids.sort(function(a,b){
                        return a-b;
                    })
                    $.each(grids,function(i,n){
                        for(var m in now.GRIDS[n]){
                            now.GRIDS[n][m]&&gos.push(now.GRIDS[n][m])
                        }
                      
                    });
                    $.unique(gos);
                   
                    var m1,n1,m2,n2;
                    m1=parseInt(grids[0]/GLOBAL.grid_xCount)+1;
                    n1=grids[0]%GLOBAL.grid_xCount
                    m2=parseInt(grids[grids.length-1]/GLOBAL.grid_xCount)+1;
                    n2=grids[grids.length-1]%GLOBAL.grid_xCount

                    var x1=(n1-1)*__w,
                    y1=(m1-1)*__h,
                    x2=n2*__w,
                    y2=m2*__h;
                    redraw_canvas.width=x2-x1;
                    redraw_canvas.height=y2-y1;
                    GLOBAL.now_ctx=redraw_ctx
                    GLOBAL.now_canvas=redraw_canvas;
                    GLOBAL.now_ctx.clearRect(0,0,GLOBAL.now_ctx.width,GLOBAL.now_ctx.height)
                    //         GLOBAL.main_ctx.clearRect(x1,y1,x2-x1,y2-y1)
                    redraw_ctx.save();
                    redraw_ctx.translate(-x1,-y1);
                    $.each(gos,function(i,n){
                        if(drawThis===true){
                            (n!==go)&&n.draw();
                        }else{
                            n.draw();
                        }
                        
                    })
                    redraw_ctx.restore();
                    copyImg=new Image();
                    copyImg.src=redraw_canvas.toDataURL();
                    copyImg.onload=function(){
                        GLOBAL.main_ctx.clearRect(x1,y1,x2-x1,y2-y1)
                        GLOBAL.main_ctx.drawImage(this,x1,y1,x2-x1,y2-y1)
                    }
                    console.log('redraw_ctx');
                    this.setCtx("main");
                    
                },
                line:function(p,isEven){
                    return p+(isEven?0:0.5)
                },
                init:function(){
                    now=this;
                    this.bind();
                },
                bind:function(){
                
                    $(sub_canvas).bind('click',function(e){
                        
                            
                    }).bind("mousemove",function(e){
                        if(isDragging==true){
                            var pos={
                            x:e.offsetX||e.layerX,
                            y:e.offsetY||e.layerY
                        }
                            now.move(pos);
                        }
                           
                    }).bind("mousedown",function(e){
                        var pos={
                            x:e.offsetX||e.layerX,
                            y:e.offsetY||e.layerY
                        }
                        console.log(e)
                        now.pick(pos)
                    }).bind("mouseup",function(e){
                        GLOBAL.sub_canvas.style.cursor="default"
                        if(isDragging==false){
                            
                        }else{
                            //now.unactive(active_GO)
                            now.reDrawSub();
                            now.active(active_GO)
                            now.setCtx("redraw")
                            now.reDrawMain(active_GO)
                            //    active_GO&&now.toMain(active_GO)
                        }
                        isDragging=false;
                            
                    }).bind("selectstart",function(){
                        return false;
                    }).bind("touchstart",function(e){
                        var pos={
                            x:e.offsetX||e.layerX,
                            y:e.offsetY||e.layerY
                        }
                        console.log(e)
                        now.pick(pos)
                    }).bind("touchmove",function(e){
 if(isDragging==true){
                            var pos={
                            x:e.offsetX||e.layerX,
                            y:e.offsetY||e.layerY
                        }
                            now.move(pos);
                        }

                    }).bind("touchend",function(e){
 GLOBAL.sub_canvas.style.cursor="default"
                        if(isDragging==false){

                        }else{
                            //now.unactive(active_GO)
                            now.reDrawSub();
                            now.active(active_GO)
                            now.setCtx("redraw")
                            now.reDrawMain(active_GO)
                            //    active_GO&&now.toMain(active_GO)
                        }
                        isDragging=false;
                    })
                },
                create:function(pos){
                    if(active_GO){
                        this.unactive(active_GO)
                        this.setCtx("redraw")
                        this.reDrawMain(active_GO)
                    }
                    //    active_GO&&this.toMain(active_GO)
                    if(this.will_GO==null) return;
                    var go=new this.will_GO();
                    go.init();
                    console.log("create")
                    go.x=(pos.x-go.width/2)<0?0:(pos.x-go.width/2)
                    go.y=(pos.y-go.height/2)<0?0:(pos.y-go.height/2)
                    go.id=this.GOS.length;
                    this.GOS.push(go);
                    this.setIndex(go);
                    this.setGRID(go)
                    this.setCtx("sub")
                    go.draw();
                    this.active(go)
                },
                move:function(pos){
                    var go=active_GO
                    go.x=(pos.x-go.width/2)<0?0:(pos.x-go.width/2)
                    go.y=(pos.y-go.height/2)<0?0:(pos.y-go.height/2)
                    console.log("moving")
                    this.setGRID(go)
                    this.reDrawSub(go);
                    go.draw();
                    this.active(go)
                    //   go.draw();
                },
                setGRID:function(go){
                    //接下来判断当前图元都占用了哪些grids,然后塞到对应的栅格中,一个GO可能对应多个栅格
                    
                    //这样编号的好处是可以随意增加栅格数量,而不会对已有的编号产生影响,因为按照这种编号方式,随着数字增加,是从一个角开始依次拍出去的,而跟横向宽度和高度没有关系
                    //对栅格编号,编号方式是n=(y+x-2)(y+x-1)/2+y
                    //例如:
                    //1   2   4   7   11
                    //3   5   8   12
                    //6   9   13
                    //10 14
                    //15
                    var __w=GLOBAL.grid_width;
                    var __h=GLOBAL.grid_height;
                    var min={x:Math.floor(go.x/__w)+1,y:Math.floor(go.y/__h)+1};
                    var max={x:Math.floor((go.x+go.width)/__w)+1,y:Math.floor((go.y+go.height)/__h)+1};
                    var index;
                        
                    var indexs=[]
                    //遍历当前图元之前所在的栅格,然后删除之,重新计算
                    $.each(go.grids,function(i,n){
                        now.GRIDS[n][go.id]=null;
                    });
                    go.grids=[] //清空栅格,重新计算
                       
                    for(var m=min.x;m<=max.x;m++){
                        for(var n=min.y;n<=max.y;n++){
                            //    index=(n+m-2)*(n+m-1)/2+n;
                            index=(n-1)*GLOBAL.grid_xCount+m;
                            if(this.GRIDS[index]==undefined){
                                this.GRIDS[index]=[]
                            }
                            var id=go.id
                            this.GRIDS[index][id]=go; //
                           
                            ($.inArray(index,go.grids)!=-1)||go.grids.push(index)//如果图元所在的栅格不包括当前,就push进图元
                            /*
                            GLOBAL.main_ctx.beginPath();
                            GLOBAL.main_ctx.lineWidth=1;
                            GLOBAL.main_ctx.strokeStyle="#aaa"
                          
                            GLOBAL.main_ctx.strokeRect((m-1)*__w,(n-1)*__h,__w,__h);
                            GLOBAL.main_ctx.fillText(index,(m-1)*__w,(n-1)*__h+10);
                            GLOBAL.main_ctx.stroke();
                             */
                        }
                    }
                },
                /**
                 *鼠标按下的时候,判断鼠标是否点到某个图元
                 */
                pick:function(pos){
                    console.log("pick")
                    var __w=GLOBAL.grid_width;
                    var __h=GLOBAL.grid_height;
                    var m=Math.floor(pos.x/__w)+1
                    var n=Math.floor(pos.y/__h)+1
                    var  index=(n-1)*GLOBAL.grid_xCount+m;
                    var gos=this.GRIDS[index]
                    //排序算法,把gos按照zIndex排序到a中
                    var a=[]
                    for(var i in gos){
                        gos[i]&&a.push(gos[i])
                    }
                    a.sort(function(a,b){
                        return a.zIndex-b.zIndex;
                    })
                    for(var i=0;i<a.length;i++){
                        if(a[i].checkPoint(pos.x,pos.y)) {
                            console.log("picked")
                            this.setCtx("sub")
                            a[i].draw();
                            this.active(a[i])
                            this.setCtx("redraw")
                            this.reDrawMain(a[i],true)
                            this.setCtx("sub")
                            isDragging=true;
                            GLOBAL.sub_canvas.style.cursor="move"
                            break;
                        };
                    }
                    if(isDragging==false){
                        
                        this.create(pos);
                        this.setCtx("sub")
                        active_GO.draw();
                        this.active(active_GO)
                        this.setCtx("redraw")
                        this.reDrawMain(active_GO,true)
                        this.setCtx("sub")
                        isDragging=true;
                    }
                    //   console.log(isDragging)
                        
                },
                setIndex:function(go){
                    this.zIndexs[zIndex]=go;
                    go.zIndex=zIndex;
                    zIndex++;
                },
                setCtx:function(name){
                    GLOBAL.now_ctx=GLOBAL[name+"_ctx"]
                    GLOBAL.now_canvas=GLOBAL[name+"_canvas"]
                }
            }
        }();
        /**
         * 文字图元
         */
        var text=ap(extend(GO),{
            _init:function(){
                this.text="";
            },
            draw:function(){
                
            }
        });
        ///////////////////////////////////////
        var resistanceMain=ap(extend(GO),{
            _init:function(){
                this.width=40
                this.height=5;
                this.scale=1.0
            },
            draw:function(){
                var x=this.x*this.scale;
                var y=this.y*this.scale;
                var ctx=GLOBAL.now_ctx;
                ctx.beginPath();
                var w=2
                ctx.lineWidth=w;
                ctx.save();
               // ctx.translate(0.5,0.5);

                ctx.strokeStyle="#C37F7F"
                ctx.moveTo(0*this.scale+x,2.5*this.scale+y);
                ctx.lineTo(10*this.scale+x,2.5*this.scale+y);
                ctx.stroke();
                ctx.beginPath()
                ctx.strokeStyle="#7F7FFE"
                ctx.strokeRect(10*this.scale+x,y,20*this.scale,5*this.scale);
                ctx.stroke();
                ctx.beginPath()
                ctx.strokeStyle="#C37F7F"
                ctx.moveTo(30*this.scale+x,2.5*this.scale+y);
                ctx.lineTo(40*this.scale+x,2.5*this.scale+y);
                ctx.stroke();
                ctx.restore()
            },
            checkPoint:function(x,y){
             
                if((x>=(this.x+10)&&x<=(this.x+this.width-10))&&(y>=this.y&&y<=(this.y+this.height))){
                    return true;
                }else{
                    return false;
                }
            }
        })
         var point=ap(extend(GO),{
            _init:function(){
                this.width=5
                this.height=5;
            },
            draw:function(){
                var x=this.x;
                var y=this.y;
                var ctx=GLOBAL.now_ctx;
                ctx.beginPath();
                ctx.fillStyle="#000"
               ctx.arc(x,y,2.5,0,Math.PI*2)
               ctx.closePath()
             //   ctx.stroke();
                ctx.fill();
                
            },
            checkPoint:function(x,y){

                if((x>=(this.x)&&x<=(this.x+this.width))&&(y>=this.y&&y<=(this.y+this.height))){
                    return true;
                }else{
                    return false;
                }
            }
        })
        
        
        GOControl.init();
        GOControl.will_GO=resistanceMain;


        $("#_1000").bind("click",function(){
            var now=this;
            this.innerHTML="随机生成1000个电阻(正在生成,请稍候,需要一定时间)"
            setTimeout(function(){
                for(var i =0;i<1000;i++){
                    GOControl.create({
                        x:1000*Math.random(),
                        y:600*Math.random()
                    })
                }
              
                now.innerHTML="随机生成1000个电阻"
            })
            
            
        });
        $("#result").bind("click",function(){
            var w=window.open("","","width=1100,height=610");
            var d=w.document
            d.open();
            console.log($("#main-canvas")[0].toBlob())
            d.write("<img src='"+$("#main-canvas")[0].toDataURL()+"' />");
            d.close();

        });
        $("#sub").bind("click",function(){
            var w=window.open("","","width=1100,height=610");
            var d=w.document
            d.open();
            d.write("<img src='"+$("#sub-canvas")[0].toDataURL()+"' />");
            d.close();

        })

        $("#resize-big").bind("click",function(){
            GLOBAL.main_ctx.clearRect(0,0,GLOBAL.main_canvas.width,GLOBAL.main_canvas.height)
            for(var i=0;i<GOControl.GOS.length;i++){
                GOControl.GOS[i].scale+=1;
                GOControl.GOS[i].draw()
            }

        })
    </script>
</body>
</html>
